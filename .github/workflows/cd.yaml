
name: CD

permissions:
  contents: write
  packages: write
  actions: read

env:
  NUGET_OUTPUT: ./src/nuget-output
  NUGET_SOURCE: https://nuget.pkg.github.com/Arne-Labs/index.json

on:
  push:
    branches:
    - main

jobs:
  build:
    name: Build-And-Publish
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v1
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4.0.1
      with:
        dotnet-version: 8.0.x
        source-url: ${{ env.NUGET_SOURCE }}
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Derive appropriate SHAs for base and head for `nx affected` commands
      id: affected-commit-shas
      uses: nrwl/nx-set-shas@v4.1

    - name: Show commit shas
      run: |
        echo "Base: ${{ steps.affected-commit-shas.outputs.base }}"
        echo "Head: ${{ steps.affected-commit-shas.outputs.head }}"

    - name: Install dotnet affected tool
      run: dotnet tool install -g dotnet-affected

    - name: Create build plan for affected projects
      id: affected
      run: |
        set +e # Disable exit on error

        dotnet affected --from ${{ steps.affected-commit-shas.outputs.base }} --to ${{ steps.affected-commit-shas.outputs.head }} -e src/TestConsole
        if [[ $? -ne 0 && $? -ne 166 ]]; then # 166 is the exit code for no affected projects
          echo "dotnet affected failed with status code ${?}!"
          exit $?
        fi

        if [ -f affected.proj ]; then
          echo "affected.proj is created..."
          echo "affected=true" >> $GITHUB_OUTPUT
        else
          echo "affected.proj is not created!"
          echo "affected=false" >> $GITHUB_OUTPUT
        fi

        exit 0

    - name: Install dependencies
      if: success() && steps.affected.outputs.affected == 'true'
      run: dotnet restore affected.proj

    - name: .NET Build
      if: success() && steps.affected.outputs.affected == 'true'
      run: dotnet build affected.proj -c Release --no-restore /p:ContinuousIntegrationBuild=true

    - name: Run Tests
      run: dotnet test affected.proj -c Release --logger GitHubActions /p:ContinuousIntegrationBuild=true

    - name: Pack build to nuget package
      if: success() && steps.affected.outputs.affected == 'true'
      run: dotnet pack affected.proj --output ${{ env.NUGET_OUTPUT }} --no-build --no-restore -c Release /p:ContinuousIntegrationBuild=true

    - name: Publish nuget packages
      if: success() && steps.affected.outputs.affected == 'true'
      run: dotnet nuget push "${{ env.NUGET_OUTPUT }}/*.nupkg" --source "${{ env.NUGET_SOURCE }}" --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v1
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4.0.1
      with:
        dotnet-version: 8.0.x
        source-url: ${{ env.NUGET_SOURCE }}
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Install nbgv
      run: |
        rm -f ./nbgv
        dotnet tool install --tool-path . nbgv

    - name: Get version
      id: version
      # run: echo ::set-output name=version::$(git describe --tags --abbrev=0)
      run: |
        VERSION=$(./nbgv get-version | awk '/NuGetPackageVersion:/ {print $2}')
        echo "::set-output name=version::$VERSION"

    - name: Create release
      id: create_release
      uses: softprops/action-gh-release@v2.0.8
      with:
        files: |
          src/nuget-output/*.nupkg
        tag_name: v${{ steps.version.outputs.version }}
        name: v${{ steps.version.outputs.version }}
        generate_release_notes: true
        token: ${{ secrets.GITHUB_TOKEN }}
